// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// CARPcpp
Rcpp::List CARPcpp(const Eigen::MatrixXd& X, const Eigen::ArrayXXd& M, const Eigen::MatrixXd& D, const Eigen::VectorXd& weights, double epsilon, double t, double rho, double thresh, int max_iter, int max_inner_iter, int burn_in, double back, int keep, int viz_max_inner_iter, double viz_initial_step, double viz_small_step, bool l1, bool show_progress, bool back_track, bool exact);
RcppExport SEXP _clustRviz_CARPcpp(SEXP XSEXP, SEXP MSEXP, SEXP DSEXP, SEXP weightsSEXP, SEXP epsilonSEXP, SEXP tSEXP, SEXP rhoSEXP, SEXP threshSEXP, SEXP max_iterSEXP, SEXP max_inner_iterSEXP, SEXP burn_inSEXP, SEXP backSEXP, SEXP keepSEXP, SEXP viz_max_inner_iterSEXP, SEXP viz_initial_stepSEXP, SEXP viz_small_stepSEXP, SEXP l1SEXP, SEXP show_progressSEXP, SEXP back_trackSEXP, SEXP exactSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXXd& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_inner_iter(max_inner_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< double >::type back(backSEXP);
    Rcpp::traits::input_parameter< int >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< int >::type viz_max_inner_iter(viz_max_inner_iterSEXP);
    Rcpp::traits::input_parameter< double >::type viz_initial_step(viz_initial_stepSEXP);
    Rcpp::traits::input_parameter< double >::type viz_small_step(viz_small_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< bool >::type back_track(back_trackSEXP);
    Rcpp::traits::input_parameter< bool >::type exact(exactSEXP);
    rcpp_result_gen = Rcpp::wrap(CARPcpp(X, M, D, weights, epsilon, t, rho, thresh, max_iter, max_inner_iter, burn_in, back, keep, viz_max_inner_iter, viz_initial_step, viz_small_step, l1, show_progress, back_track, exact));
    return rcpp_result_gen;
END_RCPP
}
// CBASScpp
Rcpp::List CBASScpp(const Eigen::MatrixXd& X, const Eigen::ArrayXXd& M, const Eigen::MatrixXd& D_row, const Eigen::MatrixXd& D_col, const Eigen::VectorXd& weights_row, const Eigen::VectorXd& weights_col, double epsilon, double t, double thresh, double rho, int max_iter, int max_inner_iter, int burn_in, double back, int keep, int viz_max_inner_iter, double viz_initial_step, double viz_small_step, bool l1, bool show_progress, bool back_track, bool exact);
RcppExport SEXP _clustRviz_CBASScpp(SEXP XSEXP, SEXP MSEXP, SEXP D_rowSEXP, SEXP D_colSEXP, SEXP weights_rowSEXP, SEXP weights_colSEXP, SEXP epsilonSEXP, SEXP tSEXP, SEXP threshSEXP, SEXP rhoSEXP, SEXP max_iterSEXP, SEXP max_inner_iterSEXP, SEXP burn_inSEXP, SEXP backSEXP, SEXP keepSEXP, SEXP viz_max_inner_iterSEXP, SEXP viz_initial_stepSEXP, SEXP viz_small_stepSEXP, SEXP l1SEXP, SEXP show_progressSEXP, SEXP back_trackSEXP, SEXP exactSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXXd& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type D_row(D_rowSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type D_col(D_colSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights_row(weights_rowSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights_col(weights_colSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_inner_iter(max_inner_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< double >::type back(backSEXP);
    Rcpp::traits::input_parameter< int >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< int >::type viz_max_inner_iter(viz_max_inner_iterSEXP);
    Rcpp::traits::input_parameter< double >::type viz_initial_step(viz_initial_stepSEXP);
    Rcpp::traits::input_parameter< double >::type viz_small_step(viz_small_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< bool >::type back_track(back_trackSEXP);
    Rcpp::traits::input_parameter< bool >::type exact(exactSEXP);
    rcpp_result_gen = Rcpp::wrap(CBASScpp(X, M, D_row, D_col, weights_row, weights_col, epsilon, t, thresh, rho, max_iter, max_inner_iter, burn_in, back, keep, viz_max_inner_iter, viz_initial_step, viz_small_step, l1, show_progress, back_track, exact));
    return rcpp_result_gen;
END_RCPP
}
// ConvexClusteringCPP
Rcpp::List ConvexClusteringCPP(const Eigen::MatrixXd& X, const Eigen::ArrayXXd& M, const Eigen::MatrixXd& D, const Eigen::VectorXd& weights, const std::vector<double> lambda_grid, double rho, double thresh, int max_iter, int max_inner_iter, bool l1, bool show_progress);
RcppExport SEXP _clustRviz_ConvexClusteringCPP(SEXP XSEXP, SEXP MSEXP, SEXP DSEXP, SEXP weightsSEXP, SEXP lambda_gridSEXP, SEXP rhoSEXP, SEXP threshSEXP, SEXP max_iterSEXP, SEXP max_inner_iterSEXP, SEXP l1SEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXXd& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type lambda_grid(lambda_gridSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_inner_iter(max_inner_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(ConvexClusteringCPP(X, M, D, weights, lambda_grid, rho, thresh, max_iter, max_inner_iter, l1, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// ConvexBiClusteringCPP
Rcpp::List ConvexBiClusteringCPP(const Eigen::MatrixXd& X, const Eigen::ArrayXXd& M, const Eigen::MatrixXd& D_row, const Eigen::MatrixXd& D_col, const Eigen::VectorXd& weights_row, const Eigen::VectorXd& weights_col, const std::vector<double> lambda_grid, double rho, double thresh, int max_iter, int max_inner_iter, bool l1, bool show_progress);
RcppExport SEXP _clustRviz_ConvexBiClusteringCPP(SEXP XSEXP, SEXP MSEXP, SEXP D_rowSEXP, SEXP D_colSEXP, SEXP weights_rowSEXP, SEXP weights_colSEXP, SEXP lambda_gridSEXP, SEXP rhoSEXP, SEXP threshSEXP, SEXP max_iterSEXP, SEXP max_inner_iterSEXP, SEXP l1SEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXXd& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type D_row(D_rowSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type D_col(D_colSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights_row(weights_rowSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights_col(weights_colSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type lambda_grid(lambda_gridSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_inner_iter(max_inner_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(ConvexBiClusteringCPP(X, M, D_row, D_col, weights_row, weights_col, lambda_grid, rho, thresh, max_iter, max_inner_iter, l1, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// clustRviz_set_logger_level_cpp
void clustRviz_set_logger_level_cpp(int level);
RcppExport SEXP _clustRviz_clustRviz_set_logger_level_cpp(SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    clustRviz_set_logger_level_cpp(level);
    return R_NilValue;
END_RCPP
}
// clustRviz_get_logger_level_cpp
int clustRviz_get_logger_level_cpp();
RcppExport SEXP _clustRviz_clustRviz_get_logger_level_cpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(clustRviz_get_logger_level_cpp());
    return rcpp_result_gen;
END_RCPP
}
// clustRviz_log_cpp
void clustRviz_log_cpp(int level, Rcpp::StringVector x);
RcppExport SEXP _clustRviz_clustRviz_log_cpp(SEXP levelSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type x(xSEXP);
    clustRviz_log_cpp(level, x);
    return R_NilValue;
END_RCPP
}
// get_cluster_assignments
Rcpp::List get_cluster_assignments(const Eigen::MatrixXi& E, const Eigen::MatrixXi& edge_ind, int n);
RcppExport SEXP _clustRviz_get_cluster_assignments(SEXP ESEXP, SEXP edge_indSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type edge_ind(edge_indSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cluster_assignments(E, edge_ind, n));
    return rcpp_result_gen;
END_RCPP
}
// MatrixRowProx
Eigen::MatrixXd MatrixRowProx(const Eigen::MatrixXd& X, double lambda, const Eigen::VectorXd& weights, bool l1);
RcppExport SEXP _clustRviz_MatrixRowProx(SEXP XSEXP, SEXP lambdaSEXP, SEXP weightsSEXP, SEXP l1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type l1(l1SEXP);
    rcpp_result_gen = Rcpp::wrap(MatrixRowProx(X, lambda, weights, l1));
    return rcpp_result_gen;
END_RCPP
}
// MatrixColProx
Eigen::MatrixXd MatrixColProx(const Eigen::MatrixXd& X, double lambda, const Eigen::VectorXd& weights, bool l1);
RcppExport SEXP _clustRviz_MatrixColProx(SEXP XSEXP, SEXP lambdaSEXP, SEXP weightsSEXP, SEXP l1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type l1(l1SEXP);
    rcpp_result_gen = Rcpp::wrap(MatrixColProx(X, lambda, weights, l1));
    return rcpp_result_gen;
END_RCPP
}
// check_weight_matrix
void check_weight_matrix(const Eigen::MatrixXd& weight_matrix);
RcppExport SEXP _clustRviz_check_weight_matrix(SEXP weight_matrixSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type weight_matrix(weight_matrixSEXP);
    check_weight_matrix(weight_matrix);
    return R_NilValue;
END_RCPP
}
// smooth_u_clustering
Rcpp::NumericVector smooth_u_clustering(Rcpp::NumericVector U_old, Rcpp::List cluster_info_list);
RcppExport SEXP _clustRviz_smooth_u_clustering(SEXP U_oldSEXP, SEXP cluster_info_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type U_old(U_oldSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cluster_info_list(cluster_info_listSEXP);
    rcpp_result_gen = Rcpp::wrap(smooth_u_clustering(U_old, cluster_info_list));
    return rcpp_result_gen;
END_RCPP
}
// tensor_projection
Rcpp::NumericVector tensor_projection(Rcpp::NumericVector X, const Eigen::MatrixXd& Y);
RcppExport SEXP _clustRviz_tensor_projection(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(tensor_projection(X, Y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_clustRviz_CARPcpp", (DL_FUNC) &_clustRviz_CARPcpp, 20},
    {"_clustRviz_CBASScpp", (DL_FUNC) &_clustRviz_CBASScpp, 22},
    {"_clustRviz_ConvexClusteringCPP", (DL_FUNC) &_clustRviz_ConvexClusteringCPP, 11},
    {"_clustRviz_ConvexBiClusteringCPP", (DL_FUNC) &_clustRviz_ConvexBiClusteringCPP, 13},
    {"_clustRviz_clustRviz_set_logger_level_cpp", (DL_FUNC) &_clustRviz_clustRviz_set_logger_level_cpp, 1},
    {"_clustRviz_clustRviz_get_logger_level_cpp", (DL_FUNC) &_clustRviz_clustRviz_get_logger_level_cpp, 0},
    {"_clustRviz_clustRviz_log_cpp", (DL_FUNC) &_clustRviz_clustRviz_log_cpp, 2},
    {"_clustRviz_get_cluster_assignments", (DL_FUNC) &_clustRviz_get_cluster_assignments, 3},
    {"_clustRviz_MatrixRowProx", (DL_FUNC) &_clustRviz_MatrixRowProx, 4},
    {"_clustRviz_MatrixColProx", (DL_FUNC) &_clustRviz_MatrixColProx, 4},
    {"_clustRviz_check_weight_matrix", (DL_FUNC) &_clustRviz_check_weight_matrix, 1},
    {"_clustRviz_smooth_u_clustering", (DL_FUNC) &_clustRviz_smooth_u_clustering, 2},
    {"_clustRviz_tensor_projection", (DL_FUNC) &_clustRviz_tensor_projection, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_clustRviz(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
