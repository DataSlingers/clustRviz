% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_clusters.R
\name{clustering.CARP}
\alias{clustering.CARP}
\title{Get clustering solution from a CARP object}
\usage{
\method{clustering}{CARP}(x, k = NULL, percent = NULL, ...)
}
\arguments{
\item{x}{A CARP object returned by \code{CARP}}

\item{k}{An interger between 1 and \code{n.obs}. The number of unique
clusters}

\item{percent}{A number between 0 and 1. The percent of regularization at
which to cut the path.}

\item{...}{Unused additional generic arguements}
}
\value{
A list with elements
\describe{
\item{\code{clustering.assignment}}{
In the case where either \code{k} or \code{percent} is specified, a vector
of cluster labels of length \code{n.obs}.
In the case where neither \code{k} nor \code{percent} is specified, a
matrix of size \code{n.obs} by \code{n.obs}, each row specifying a unique
cluster assignment along the CARP path.
}
\item{\code{cluster.means}}{
In the case where either \code{k} or \code{percent} is specified, a matrix
of dimension \code{p.var} by \code{length(unique(clustering.assignment))}
with each column a cluster mean.
In the case where neither \code{k} nor \code{percent} is specificed, a
list of matricies of length \code{n.obs}, representing the cluster means
for each cluster assignment along the CARP path.
}
}
}
\description{
Returns cluster labels and cluster means at a point along the CARP path,
or the entire cluster sequence of cluster labels and means
}
\details{
Passing either the desired number of clusters (\code{k}) or the percent
regularization (\code{percent}) returns the clustering assignment
and cluster means at the specific point along the CARP path. If neither
\code{k} nor \code{percent} are specified, all clusteirng assignments and
mean matricies are returned.
}
\examples{
library(clustRviz)
data("presidential_speech")
Xdat <- presidential_speech[1:10,1:4]
carp.fit <- CARP(X=Xdat)
# Return the CARP iterate with k=5 clusters
carp.clustering <- clustering(carp.fit,k=5)
# Examine the cluster labels
carp.clustering$clustering.assignment
# Examine the cluster means
head(carp.clustering$cluster.means)
# Return the whole sequence of solutions
carp.clustering.full <- clustering(carp.fit)
# Examine the k=5 solution again
carp.clustering.full$clustering.assignment[5,]
# Examine the k=5 means again
head(carp.clustering.full$cluster.means[[5]])
}
