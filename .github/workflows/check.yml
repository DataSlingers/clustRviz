# Adapted from https://github.com/r-lib/actions/blob/master/examples/check-standard.yaml
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

name: R-CMD-check and Deploy

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'devel'}
          - {os: windows-latest, r: '4.0'}
          - {os: macOS-latest, r: '4.0'}
          - {os: ubuntu-16.04, r: '4.0', 'rspm': 'https://packagemanager.rstudio.com/cran/__linux__/xenial/latest'}
          - {os: ubuntu-16.04, r: 'oldrel', 'rspm': 'https://packagemanager.rstudio.com/cran/__linux__/xenial/latest'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo -s eval "$sysreqs"

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran(c('rcmdcheck', 'devtools', 'roxygen2', 'testthat', 'markdown', 'knitr', 'rmarkdown', 'pkgdown'))
          remotes::install_cran(c('gifski', 'gganimate', 'cvxclustr', 'cvxbiclustr'))
        shell: Rscript {0}

      - name: Add auto-generated files
        run: |
          file.create("NAMESPACE")
          cat("# Generated by roxygen2: do not edit by hand", file = "NAMESPACE")
          cat("\n\nuseDynLib(clustRviz)", file = "NAMESPACE", append = TRUE)
          Rcpp::compileAttributes(verbose = TRUE)
          roxygen2::roxygenize()
          ## Avoid time-out 
          cat("WRITING TEST STUBS -------- \n\n")
          skeleton <- readLines(file.path("tests", "test_stub.R"))
          for(f in list.files(file.path("tests", "testthat"), pattern="test_")){
             stub <- gsub("test_(.*)\\.R", "\\1", f)
             writeLines(gsub("PATTERN", stub, skeleton),
                        file.path("tests", paste0("test_", stub, ".R")))
          }
          unlink(file.path("tests", "test_stub.R"))
          ## GitHash for debugging purposes
          cat("ADDING GIT HASH -------- \n\n")
          if(!dir.exists("inst")){
              dir.create("inst")
          }
          writeLines(system("git rev-parse HEAD", intern=TRUE), "inst/GIT.HASH")
        shell: Rscript {0}

      - name: R CMD check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Run coverage
        if: success() && matrix.config.os == 'macOS-latest' && matrix.config.r == '4.0'
        run: |
           remotes::install_cran('covr')
           library(covr)
           flags <- getOption("covr.flags")
           flags[] <- gsub("-O0 ", "", flags)
           options(covr.flags=flags)
           codecov(quiet=FALSE)
        shell: Rscript {0}

      - name: Clean up build artifacts and render pkgdown site
        if: success() && matrix.config.os == 'macOS-latest'
        run: |
           devtools::install()
           rmarkdown::render('README.Rmd')
           pkgdown::build_site()
           unlink('src/*o', force = TRUE)
           unlink('*Rcheck', force = TRUE, recursive = TRUE)
           unlink('*tar.gz', force = TRUE)
           file.rename('.github/.gitignore.deploy', '.gitignore')
           ## Copy GIF to a place where pkgdown site will find it
           dir.create("docs/inst", recursive = TRUE)
           file.copy("inst/path_dyn.gif", "docs/inst/path_dyn.gif")
        shell: Rscript {0}

      - name: Deploy build package
        if: success() && matrix.config.os == 'macOS-latest' && github.ref == 'refs/heads/develop' && github.repository_owner == 'DataSlingers'
        run: |
          git checkout master || git checkout -b master
          git add man/* || echo "No doc changes to commit"
          git add R/* || echo "No R code changes to commit"
          git add tests/* || echo "No test files to commit"
          git rm tests/test_stub.R || echo "No stub file to remove"
          git add src/* || echo "No C++ code changes to commit"
          git add README.md || echo "No README changes to commit"
          git add NAMESPACE || echo "No NAMESPACE changes to commit"
          git add vignettes/*html || echo "No vignette HTML changes to commit"
          git add docs/* || echo "No pkgdown changes to commit"
          git add .gitignore || echo "No .gitignore changes to commit"
          git config user.email "michael.weylandt@gmail.com"
          git config user.name "${{github.actor}} (Auto-Deploy via GitHub Actions)"
          git commit -m "Add build artifacts" || echo "No changes to commit"
          git push -f -u https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git master || echo "No changes to commit"
